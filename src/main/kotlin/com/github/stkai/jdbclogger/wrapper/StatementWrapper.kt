package com.github.stkai.jdbclogger.wrapper

import com.github.stkai.jdbclogger.Logger
import org.slf4j.LoggerFactory
import java.sql.Connection
import java.sql.ResultSet
import java.sql.SQLWarning
import java.sql.Statement

/**
 * @author St.kai
 * @version 1.0
 * @date 2022-07-17 14:54
 */
@SuppressWarnings("TooManyFunctions")
open class StatementWrapper(private var statement: Statement, open var sql: String?) : Statement {
    private val log = LoggerFactory.getLogger(this::class.java)

    override fun <T : Any?> unwrap(iface: Class<T>?): T {
        return statement.unwrap(iface)
    }

    override fun isWrapperFor(iface: Class<*>?): Boolean {
        return statement.isWrapperFor(iface)
    }

    override fun close() {
        statement.close()
    }

    override fun executeQuery(sql: String?): ResultSet {
        log.trace("executeQuery:{}", sql)
        return Logger.execute(sql) { this.statement.executeQuery(sql) }
    }

    override fun executeUpdate(sql: String?): Int {
        log.trace("executeUpdate,{}", sql)
        return Logger.execute(sql) { statement.executeUpdate(sql) }
    }

    override fun executeUpdate(sql: String?, autoGeneratedKeys: Int): Int {
        log.trace("executeUpdate:{}", sql)
        return Logger.execute(sql) { statement.executeUpdate(sql, autoGeneratedKeys) }
    }

    override fun executeUpdate(sql: String?, columnIndexes: IntArray?): Int {
        log.trace("executeUpdate:{}", sql)
        return Logger.execute(sql) { statement.executeUpdate(sql, columnIndexes) }
    }

    override fun executeUpdate(sql: String?, columnNames: Array<out String>?): Int {
        log.trace("executeUpdate:{}", sql)
        return Logger.execute(sql) { statement.executeUpdate(sql, columnNames) }
    }

    override fun getMaxFieldSize(): Int {
        return statement.maxFieldSize
    }

    override fun setMaxFieldSize(max: Int) {
        statement.maxFieldSize = max
    }

    override fun getMaxRows(): Int {
        return statement.maxRows
    }

    override fun setMaxRows(max: Int) {
        statement.maxRows = max
    }

    override fun setEscapeProcessing(enable: Boolean) {
        statement.setEscapeProcessing(enable)
    }

    override fun getQueryTimeout(): Int {
        return statement.queryTimeout
    }

    override fun setQueryTimeout(seconds: Int) {
        statement.queryTimeout = seconds
    }

    override fun cancel() {
        statement.cancel()
    }

    override fun getWarnings(): SQLWarning? {
        return statement.warnings
    }

    override fun clearWarnings() {
        statement.clearWarnings()
    }

    override fun setCursorName(name: String?) {
        statement.setCursorName(name)
    }

    override fun execute(sql: String?): Boolean {
        log.trace("execute:{}", sql)
        return Logger.execute(sql) { statement.execute(sql) }
    }

    override fun execute(sql: String?, autoGeneratedKeys: Int): Boolean {
        log.trace("execute:{}", sql)
        return Logger.execute(sql) { statement.execute(sql, autoGeneratedKeys) }
    }

    override fun execute(sql: String?, columnIndexes: IntArray?): Boolean {
        log.trace("execute:{}", sql)
        return Logger.execute(sql) { statement.execute(sql, columnIndexes) }
    }

    override fun execute(sql: String?, columnNames: Array<out String>?): Boolean {
        log.trace("execute:{}", sql)
        return Logger.execute(sql) { statement.execute(sql, columnNames) }
    }

    override fun getResultSet(): ResultSet {
        return statement.resultSet
    }

    override fun getUpdateCount(): Int {
        return statement.updateCount
    }

    override fun getMoreResults(): Boolean {
        return statement.moreResults
    }

    override fun getMoreResults(current: Int): Boolean {
        return statement.getMoreResults(current)
    }

    override fun setFetchDirection(direction: Int) {
        statement.fetchDirection = direction
    }

    override fun getFetchDirection(): Int {
        return statement.fetchDirection
    }

    override fun setFetchSize(rows: Int) {
        statement.fetchSize = rows
    }

    override fun getFetchSize(): Int {
        return statement.fetchSize
    }

    override fun getResultSetConcurrency(): Int {
        return statement.resultSetConcurrency
    }

    override fun getResultSetType(): Int {
        return statement.resultSetType
    }

    override fun addBatch(sql: String?) {
        log.trace(sql)
        statement.addBatch(sql)
    }

    override fun clearBatch() {
        Logger.currentSql = ""
        statement.clearBatch()
    }

    override fun executeBatch(): IntArray {
        return statement.executeBatch()
    }

    override fun getConnection(): Connection {
        return statement.connection
    }

    override fun getGeneratedKeys(): ResultSet {
        return statement.generatedKeys
    }

    override fun getResultSetHoldability(): Int {
        return statement.resultSetHoldability
    }

    override fun isClosed(): Boolean {
        return statement.isClosed
    }

    override fun setPoolable(poolable: Boolean) {
        statement.isPoolable = poolable
    }

    override fun isPoolable(): Boolean {
        return statement.isPoolable
    }

    override fun closeOnCompletion() {
        statement.closeOnCompletion()
    }

    override fun isCloseOnCompletion(): Boolean {
        return statement.isCloseOnCompletion
    }
}
